{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","st4","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","styles","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputstyles","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.f82e266f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__zlGv8\"};","import React, { Component } from \"react\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport styles from \"./Auth.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Mail Address\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignup: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.st4.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { isSignup: !prevState.isSignup };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if (this.props.error) {\r\n      errorMessage = <p>{this.props.error.message}</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n\r\n    return (\r\n      <div className={styles.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button>\r\n          <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">\r\n            SWITCH TO {this.state.isSignup ? \"SIGN IN\" : \"SIGN UP\"}\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import React from \"react\";\n\nimport styles from \"./Input.module.css\";\n\nconst input = (props) => {\n  let inputElement = null;\n  const inputstyles = [styles.InputElement];\n\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputstyles.push(styles.Invalid);\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputElement = (\n        <input\n          className={inputstyles.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputElement = (\n        <textarea\n          className={inputstyles.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n      break;\n    case \"select\":\n      inputElement = (\n        <select\n          className={inputstyles.join(\" \")}\n          value={props.value}\n          onChange={props.changed}\n        >\n          {props.elementConfig.options.map((option) => (\n            <option key={option.value} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputElement = (\n        <input\n          className={inputstyles.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.changed}\n        />\n      );\n  }\n\n  return (\n    <div className={styles.Input}>\n      <label className={styles.Label}>{props.label}</label>\n      {inputElement}\n    </div>\n  );\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3ej5c\",\"Label\":\"Input_Label__2aYGN\",\"InputElement\":\"Input_InputElement__2LBUS\",\"Invalid\":\"Input_Invalid__18rQc\"};"],"sourceRoot":""}